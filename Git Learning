Learning Git an GitHUB:
git is the tools that helps to track changes  in the code. 
GitHUb is the website that developers use to upload the code and collaborate with others developers.

########################################################

# work flows 
 1. creating repos itary - a place where you can store your project files, such as HTML documents, CSS stylesheets, JavaScript source code, images, videos.
 2. Cloning  a repository - When you want to start working on someone else's project, you clone it onto your computer using git clone <url>. 
 3. Making changes  - write, edit, stage, commit, Pull
 4. Pushing to the repos on the remote. 

# Basic command:
git clone <link> it clones the repos on the local pc 

git status for seeing the status of the git.


after modifying the  file, we need to add & commit (save)  our work..
####
add cmd _ adds the new or changed file in your working directory to the git staging area so that it is ready to commit.
(git add .
)
commit cmd: it is the record of change
git commit -m "message so that to track y we have chnages"
#####

########
 # files type:
untracked file: new files that git doesnt yet track
modified: file is changed
staged: file is ready to staged
unmodified: unchanged
########


# PUSH COMMAND:
push comd: upload the loacl repo to the remote repo
(git push origin main)
 where origin is the name we have made for the remote repo and main is the branch where we want to change 


 # INIT command: 
 used to create a new repository on the folder:
(git init )
git remote add origin <link>
git remote -v =to verify the remote
git branch = to check the branches of the reopo
git branch -M main = to rename branches
git push origin main 
#we can also use git push -u origin main (we do not want to write push origin main always to upload the file so this -u flag says we will always push the file in the origin main and we just need to write git push )

# Branch Commands
check the curent branches with = git branch 
to create a new branch = git checkout -b <name>
to switch between branches = git checkout <name>
to delete  a branch = git branch -d <name>
                      git branch -D <name>: this can be used if you are sure about deleting the branch. 

# Merging the branches 
to  merge two branches main(master) with other branches 
first  go to the branch from which you want to merge using : git checkout <name>
then use the commad : git merge <main> (the main is the branch name )

or the oher way is to create a pull request  in Github, then accept it.

Now we make changes in the remote repo of Github but it willnot show untill you write a pull command in the local repo 
for that we use:   git pull origin <branch_name>
   used to fetch and downaloads  all the changes from the remote repo to our local machine.
   

# Resolving Merge conflict
an event that take place when git is unable to automatically resolve differences in code between two commits.
when there are conflicting files during merging.
you will see <<<<<<< HEAD , =======, >>>>>>> <branch/commit>.
in these lines you need to manually edit the file to get rid off the conflicts.
once done save the file and use : git add <file-name> to stage the file

# Undoing Changes:

case 1: stagged changes (you  added but not committed yet):
use : git reset -- <file-name>
this will unstage the file but the change will still remain in the working directory.

case 2: Committed Change (for 1 commited file only)
use : git reset HEAD~1 (it  will undo your last commit).

case 3: Committed Change ( for many commit file)
use : git log // to see the list of commits.
git reset <commit_code>// where you see the commit code after typing git log.
git reset --hard <commit_id>  (hard for to remove from the VScode to )

case 4: Revert a commit
use : git revert <commit_id>
In case you have made a mistake in your latest commit, you can simply use the command `git revert <commit>` to undo that commit

# Git Logs
This command shows the history of commits made on a specific branch. It lists each commitâ€™s SHA, author, date, and commit message
used to view the history of the project.

# Fork:
it is a new repository that shares code and visibility settings with the original  repository. 
Fork is just like the rough copy of someones work that you save in your  own account for creating changes or simply contributing in it.
